{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/TileCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Navbar","class","href","score","topScore","Jumbotron","TileCard","key","id","onClick","Img","variant","src","image","Body","Title","name","App","state","data","players","handleCorrectGuess","newData","console","log","newScore","newTopScore","Math","max","setState","handleIncorrectGuess","resetData","handleItemClick","guessedCorrect","map","item","newItem","clicked","shuffleData","this","i","length","j","floor","random","temp","Container","Row","Col","sm","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc64b9b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n  }\r\n  \r\n  \r\nexport default Wrapper;\r\n  ","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n\r\n        <nav class=\"navbar navbar-expand-md sticky-top navbar-light bg-light\">\r\n            <a class=\"navbar-brand navbar-nav mr-auto\" href=\"/\"><h2>Clicky game</h2></a>\r\n            <div class=\"mx-auto order-0\">\r\n                <h3 class=\"navbar-nav mx-auto justify-content-center\">Click an image to begin!</h3>\r\n            </div>\r\n            <div class=\"ml-auto\">\r\n                <h3 class=\"navbar-nav mx-auto\">\r\n                    Score: {props.score} | Top Score: {props.topScore}\r\n                    </h3>\r\n            </div>\r\n        </nav>)\r\n\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n\r\n    return (\r\n        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">Clicky Game!</h1>\r\n                <p class=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport \"./style.css\";\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\nfunction TileCard(props) {\r\n\r\n    return (\r\n        <button key={props.id} onClick={props.onClick}>\r\n            <Card>\r\n                <Card.Img variant=\"top\" src={props.image}/>\r\n                <Card.Body>\r\n                    <Card.Title>{props.name}</Card.Title>\r\n                </Card.Body>\r\n            </Card >\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default TileCard;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Wrapper from './components/Wrapper';\r\nimport Navbar from './components/Navbar';\r\nimport Jumbotron from './components/Jumbotron';\r\n// import TileCardContainer from './components/TileCardContainer';\r\nimport TileCard from './components/TileCard';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport players from \"./players.json\";\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    data: players,\r\n    score: 0,\r\n    topScore: 0,\r\n  }\r\n\r\n  // componentDidMount() {\r\n\r\n  // }\r\n\r\n  startApp() {\r\n    this.setState({ data: this.shuffleData(this.state.data) })\r\n    this.state.data.map(item => console.log(item))\r\n  }\r\n\r\n  resetData() {\r\n    console.log(\"RESET\")\r\n    const resetData = this.state.data.map(item => ({ ...item, clicked: false }))\r\n    return resetData;\r\n  }\r\n\r\n  handleCorrectGuess = newData => {\r\n    console.log(\"CORRECT\")\r\n\r\n    const { topScore, score } = this.state; //  changed 'this' to newData\r\n    const newScore = score + 1;\r\n    const newTopScore = Math.max(newScore, topScore);\r\n\r\n    this.setState({ score: newScore, topScore: newTopScore });\r\n  }\r\n\r\n  handleIncorrectGuess = newData => {\r\n    console.log(\"incorrect\")\r\n    this.setState({\r\n      data: this.resetData(this.state.data),\r\n      score: 0\r\n    })\r\n  }\r\n\r\n  shuffleData(data) {\r\n    for (var i = data.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = data[i];\r\n      data[i] = data[j];\r\n      data[j] = temp;\r\n    }\r\n  }\r\n\r\n  handleItemClick = id => {\r\n    let guessedCorrect = false;\r\n    const newData = this.state.data.map(item => {\r\n      const newItem = { ...item };\r\n      if (newItem.id === id) {\r\n        if (!newItem.clicked) {\r\n          item.clicked = true;\r\n          guessedCorrect = true;\r\n          console.log(item)\r\n        } \r\n      }\r\n      return newItem;\r\n\r\n    })\r\n    this.shuffleData(this.state.data)\r\n    guessedCorrect ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\r\n        <Jumbotron />\r\n        <Container>\r\n          <Row>\r\n            {this.state.data.map(item =>\r\n              (<Col sm={3} >\r\n                <TileCard\r\n                  key={item.id}\r\n                  onClick={() => this.handleItemClick(item.id)}\r\n                  name={item.name}\r\n                  image={item.image}>\r\n                </TileCard>\r\n              </Col>)\r\n            )}\r\n          </Row>\r\n        </Container>;\r\n      </Wrapper >\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}